const { SlashCommandBuilder } = require("@discordjs/builders");
const Discord = require("discord.js");

module.exports = {
    data: new SlashCommandBuilder()
    .setName("loop")
    .setDescription("–í–º–∏–∫–∞—î/–≤–∏–º–∏–∫–∞—î –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø—ñ—Å–Ω—ñ –∞–±–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—î—ó —á–µ—Ä–≥–∏.")
	.addStringOption(option =>
		option.setName("type")
			.setDescription("–¢–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è, —è–∫–∏–π –≤–∏ –± —Ö–æ—Ç—ñ–ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏.")
			.setRequired(false)
			.addChoice("–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø—ñ—Å–Ω—ñ", "on")
			.addChoice("–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—î—ó —á–µ—Ä–≥–∏", "all")
			.addChoice("–í–∏–º–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è", "off")),
    aliases: ["–ª—É–ø", "–ø–æ–≤—Ç–æ—Ä", "–ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è", "repeat", "replay"],
    category: "–º—É–∑–∏–∫–∞",
    hidden: false,
    botChatExclusive: true,
    djRoleRequired: true,
    async execute(message, args, client, voice, config) {

        let embed = new Discord.MessageEmbed().setColor("#55bffc");

        if(!voice.queue.length) return await client.replyOrSend({embeds: [embed.setColor("#fc2557").setDescription("üîÑ‚ùå –ó–∞—Ä–∞–∑ –Ω—ñ—á–æ–≥–æ –Ω–µ –≥—Ä–∞—î.")], ephemeral: true}, message);

        if(message.type === "APPLICATION_COMMAND") {
            args = [message.options.get("type")?.value];
        } else {
            args[0] = args[0]?.trim()?.toLowerCase();
        }

        //This is kinda bad tbh
        if(!args[0] || (args[0] != "off" && args[0] != "on" && args[0] != "all" && args[0] != "–≤—Å—ñ" && args[0] != "–≤–∫–ª" && args[0] != "–≤–º–∫" && args[0] != "–≤–∏–º–∫" && args[0] != "–≤–∫–ª—é—á–∏—Ç–∏" && args[0] != "–≤–≤—ñ–º–∫–Ω—É—Ç–∏" && args[0] != "–≤–∏–º–∫–Ω—É—Ç–∏" && args[0] != "–≤–∏–∫–ª" && args[0] != "–≤–∏–∫–ª—é—á–∏—Ç–∏")) {
            switch (voice.isLooped) {
                case "off":
                args = ["on"];    
                    break;
                case "on":
                args = ["all"];    
                    break;
                case "all":
                args = ["off"];    
                    break;
            }
        }

        //This is not amazing, either.
        if(args[0] == "on" || args[0] == "–≤–∫–ª" || args[0] == "–≤–∫–ª—é—á–∏—Ç–∏" || args[0] == "–≤–º–∫" || args[0] == "–≤–≤—ñ–º–∫–Ω—É—Ç–∏") {

            voice.isLooped = "on";
            await client.replyOrSend({content: " ", embeds: [embed.setDescription("üîÇ –ü—Ä–æ–≥—Ä–∞–≤–∞—á —Ç–µ–ø–µ—Ä –ø–æ–≤—Ç–æ—Ä—é—î –ø–æ—Ç–æ—á–Ω—É –ø—ñ—Å–Ω—é.")]}, message);
            console.log("[" + message.guild.name + "] –ü—Ä–æ–≥—Ä–∞–≤–∞—á —Ç–µ–ø–µ—Ä –ø–æ–≤—Ç–æ—Ä—é—î –ø–æ—Ç–æ—á–Ω—É –ø—ñ—Å–Ω—é.");
        } else if(args[0] == "all" || args[0] == "–≤—Å—ñ") {

            voice.isLooped = "all";
            await client.replyOrSend({content: " ", embeds: [embed.setDescription("üîÑ –ü—Ä–æ–≥—Ä–∞–≤–∞—á —Ç–µ–ø–µ—Ä –ø–æ–≤—Ç–æ—Ä—é—î –≤—Å—é —á–µ—Ä–≥—É.")]}, message);
            console.log("[" + message.guild.name + "] –ü—Ä–æ–≥—Ä–∞–≤–∞—á —Ç–µ–ø–µ—Ä –ø–æ–≤—Ç–æ—Ä—é—î –≤—Å—é —á–µ—Ä–≥—É.");
        } else if(args[0] == "off" || args[0] == "–≤–∏–∫–ª" || args[0] == "–≤–∏–∫–ª—é—á–∏—Ç–∏" || args[0] == "–≤–∏–º–∫–Ω—É—Ç–∏" || args[0] == "–≤–∏–º–∫") {

            voice.isLooped = "off";
            await client.replyOrSend({content: " ", embeds: [embed.setDescription("‚û°Ô∏è –ü—Ä–æ–≥—Ä–∞–≤–∞—á –∑–Ω—è—Ç–æ –∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.")]}, message);
            console.log("[" + message.guild.name + "] –ü—Ä–æ–≥—Ä–∞–≤–∞—á –∑–Ω—è—Ç–æ –∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.");
        } else {

            console.log("[" + message.guild.name + "] –ü–æ–º–∏–ª–∫–∞ —É –∫–æ–º–∞–Ω–¥—ñ loop.js - —Å—É–∫–∞, –ø–µ—Ä–µ—Ä–æ–±–ª—é–π —Ü—é –∫–æ–º–∞–Ω–¥—É.");
            return await client.replyOrSend({content: " ", embeds: [embed.setDescription("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ —Ü–µ —Ä–∞–¥—ñ, —ñ –≤—ñ–Ω –º–æ–∂–ª–∏–≤–æ –ø–æ—Ñ—ñ–∫—Å–∏—Ç—å.")]}, message);
        }

    }
}